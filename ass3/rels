#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... print info about different releases for Movie

import sys
import psycopg2
#from helpers import whatever, functions, you, need

# define any local helper functions here

# set up some globals

usage = "Usage: rels 'PartialMovieTitle'"
db = None

# process command-line args

argc = len(sys.argv)
if argc != 2:
  print(usage)
  exit()

name = sys.argv[1]






# manipulate database
try:
  db = psycopg2.connect("dbname=imdb")
  cur = db.cursor()
  qry = "select title,start_year,id from movies where title ~* %s order by start_year,title"
  cur.execute(qry,[name])
  movie = cur.fetchall()
  if len(movie) == 1:
    #find movies ! print the all version of movies
    movieqry = "select local_title,region,language from Movies inner join Aliases on Movies.id = Aliases.movie_id where Movies.id = %s group by Aliases.id,Movies.id order by ordering"
    movieid = movie[0][2]
    cur.execute(movieqry,[movieid])
    releasedmovie = cur.fetchall()
    if len(releasedmovie) == 0:
      print(f'{movie[0][0]} ({movie[0][1]}) has no alternative releases')
    else:
      # have other version
      print(f'{movie[0][0]} ({movie[0][1]}) was also released as')
      for mov in releasedmovie:
        string = ''
        string += f'\'{mov[0]}\' '
        if mov[1] != None and mov[2] != None:
          string += f'(region: {mov[1].strip()}, language: {mov[2].strip()})'
        elif mov[1] != None and mov[2] == None:
          string +=  f'(region: {mov[1].strip()})'
        elif mov[1] == None and mov[2] != None:
          string += f'(language: {mov[2].strip()})'
        print(string)
  elif(len(movie) == 0):
    # No movies of name
    print(f'No movie matching \'{name}\'')
  else:
    # multiple name of movies
    print(f'Movies matching \'{name}\'')
    print('===============')
    for mov in movie:
      print(f'{mov[0]} ({mov[1]})')
except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()
